{"ast":null,"code":"export default {\n  name: 'forecast',\n  data() {\n    return {\n      forecasts: [],\n      lat: 37.566535,\n      lon: 126.977969\n    };\n  },\n  filters: {\n    weekday(date) {\n      let weekdayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      return weekdayName[date.getDay()]; // getDay는 요일계산, 0이면 일, 1이면 월, 2이면 화...\n    }\n  },\n\n  created() {\n    this.$bus.$on('sendCordinate', this.setCordinate);\n  },\n  methods: {\n    setCordinate(cordinate) {\n      this.lat = cordinate.lat(); // lat과 lng에 이벤트버스로 받아온 cordinate의 lat과 lng값을 저장\n      this.lng = cordinate.lng();\n      this.axios.get(`http://api.openweathermap.org/data/2.5/forecast?lat=${this.lat}&lon=${this.lon}&appid=67c78818c6afe50f6425fa397c98a955`).then(response => {\n        let data = response.data;\n        this.forecasts = data.list;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    convertToDate(timestamp) {\n      return new Date(timestamp * 1000); // 유닉스타임은 초단위이기 때문에 밀리초단위로 바꿔줌\n    }\n  }\n};","map":{"version":3,"names":["name","data","forecasts","lat","lon","filters","weekday","date","weekdayName","getDay","created","$bus","$on","setCordinate","methods","cordinate","lng","axios","get","then","response","list","catch","error","console","log","convertToDate","timestamp","Date"],"sources":["src/components/Forecast.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <ul class=\"forecasts\">\r\n            <template v-for=\"(forecast, i) in forecasts\">\r\n                <!-- 조건이 만족할 때만 실행, 아래 key는 key값으로 forecast.dt(api 설명서 보면 나옴)를 사용하겠다 (키값으로 서로다른걸 구분하기 위해 사용)-->\r\n\r\n                <li v-if=\"i % 8 == 0\" :key=\"forecast.dt\" class=\"item\">\r\n                    <div class=\"weekday\">\r\n                        <!-- 실질적으로 dt(시간정보)로 요일 계산해야함 -->\r\n                        <!-- \"|\" 는 심플 파이프로 convertToDate로 나온 데이터가 weekday로 넘어감 -->\r\n                        {{ convertToDate(forecast.dt) | weekday }}\r\n                    </div>\r\n                    <div class=\"icon\">\r\n                        <img :src=\"`http://openweathermap.org/img/w/${forecast.weather[0].icon}.png`\">\r\n                        <!-- 바인딩(:)을 붙어야함 src앞에 그래야 그림 나옴-->\r\n                    </div>\r\n                    <div class=\"temperature\">\r\n                        {{ (forecast.main.temp - 273.15).toFixed(0) }}℃\r\n                    </div>\r\n                </li>\r\n\r\n            </template>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'forecast',\r\n    data() {\r\n        return {\r\n            forecasts: [],\r\n            lat: 37.566535,\r\n            lon: 126.977969\r\n        }\r\n    },\r\n    \r\n    filters: {\r\n        weekday(date) {\r\n            let weekdayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n            return weekdayName[date.getDay()]; // getDay는 요일계산, 0이면 일, 1이면 월, 2이면 화...\r\n        }\r\n    },\r\n    created() {\r\n        this.$bus.$on('sendCordinate', this.setCordinate)\r\n    },\r\n    methods: {\r\n        setCordinate(cordinate) {\r\n            this.lat = cordinate.lat() // lat과 lng에 이벤트버스로 받아온 cordinate의 lat과 lng값을 저장\r\n            this.lng = cordinate.lng()\r\n            this.axios.get(`http://api.openweathermap.org/data/2.5/forecast?lat=${this.lat}&lon=${this.lon}&appid=67c78818c6afe50f6425fa397c98a955`)\r\n                .then((response) => {\r\n                    let data = response.data\r\n                    this.forecasts = data.list\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                })\r\n        },\r\n        convertToDate(timestamp) {\r\n            return new Date(timestamp * 1000) // 유닉스타임은 초단위이기 때문에 밀리초단위로 바꿔줌\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.forecasts {\r\n    display: flex;\r\n    width: 80%;\r\n    padding: 0;\r\n    margin: 0 auto;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.forecasts>li.item {\r\n    position: relative;\r\n    flex: 1;\r\n    color: white;\r\n    text-align: center;\r\n    list-style-type: none;\r\n}\r\n\r\n.forecasts>li.item:first-child:before {\r\n    content: '';\r\n    position: absolute;\r\n    top: -10px;\r\n    left: 50%;\r\n    display: block;\r\n    width: 6px;\r\n    height: 6px;\r\n    margin-left: -3px;\r\n    border-radius: 50%;\r\n    background-color: #fa4444;\r\n}\r\n\r\n.forecasts>li.item>.temperature {\r\n    margin-top: -8px;\r\n}</style>"],"mappings":"AA2BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,GAAA;MACAC,GAAA;IACA;EACA;EAEAC,OAAA;IACAC,QAAAC,IAAA;MACA,IAAAC,WAAA;MACA,OAAAA,WAAA,CAAAD,IAAA,CAAAE,MAAA;IACA;EACA;;EACAC,QAAA;IACA,KAAAC,IAAA,CAAAC,GAAA,uBAAAC,YAAA;EACA;EACAC,OAAA;IACAD,aAAAE,SAAA;MACA,KAAAZ,GAAA,GAAAY,SAAA,CAAAZ,GAAA;MACA,KAAAa,GAAA,GAAAD,SAAA,CAAAC,GAAA;MACA,KAAAC,KAAA,CAAAC,GAAA,6DAAAf,GAAA,aAAAC,GAAA,2CACAe,IAAA,CAAAC,QAAA;QACA,IAAAnB,IAAA,GAAAmB,QAAA,CAAAnB,IAAA;QACA,KAAAC,SAAA,GAAAD,IAAA,CAAAoB,IAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,cAAAC,SAAA;MACA,WAAAC,IAAA,CAAAD,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}